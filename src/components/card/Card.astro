---
import { Icon } from 'astro-icon/components';
import { home } from '../../data/site';
import logger from '../../configuration/logger';

const {cardData,transition} = Astro.props;

logger.info("cardData:"+JSON.stringify(cardData));
const { id,href, bgcolor,icon,colorIcon,title,subTitle,showIcon,target,titleSize,linkType,tags,tmplUrl,isDinamic} = cardData;
let etiquetas = tags;
if (etiquetas == undefined) {
    etiquetas = [];
}
logger.info("NewCard.astro etiquetas:"+JSON.stringify(etiquetas));
let templateUrl = tmplUrl;
if (templateUrl===undefined){
    templateUrl="";
}
let isUrlDinamica= 'N';
if (isDinamic){
    isUrlDinamica= 'S';    
}

logger.info("NewCard.astro templateUrl:"+templateUrl);
logger.info("NewCard.astro isUrlDinamica:"+isUrlDinamica);
const jsonEtiquetas = JSON.stringify(etiquetas).toString();
// Helper function to capitalize first letter
const capitalize = (str: string) => str.charAt(0).toUpperCase() + str.slice(1);
---
<a href={`${href}`} {target} data-tags={jsonEtiquetas} data-tmplUrl={templateUrl} data-isdinamicurl={isUrlDinamica} onclick="navegar()"
    class:list={[
        'group relative bg-gray-900/50 backdrop-blur-sm rounded-2xl border border-gray-800/50 hover:border-purple-500/50 transition-all duration-300 hover:shadow-[0_0_30px_-12px_rgba(168,85,247,0.5)]',
        {
            'p-1.5': titleSize == "sg",
        },
        {
            'p-3': titleSize == "sm",
        },       
        {
            'p-6': titleSize == "xl",
        },
        {
            'p-6': titleSize === undefined,
        }, 
    ]}>
    <div class="flex items-center gap-4">
        {showIcon && (
            <div 
                class="w-14 h-14 rounded-xl flex items-center justify-center transition-transform duration-300 group-hover:scale-110"
                style={`background-color: ${bgcolor}15`}
            >
                <Icon 
                    name={icon} 
                    class="w-8 h-8 transition-all duration-300 group-hover:scale-110" 
                    style={`color: ${colorIcon}`}
                />
            </div>
        )}
        <div class="flex-1" >
            <h3 transition:name={transition}  class:list={[
                    'font-bold text-white group-hover:text-purple-400 transition-colors',
                    {
                        'text-sg': titleSize == "sg",
                    },
                    {
                        'text-sm': titleSize == "sm",
                    },
                    {
                        'text-xl': titleSize == "xl",
                    },
                    {
                        'text-xl': titleSize === undefined,
                    }, 
                ]}
            
            >
                {capitalize(title)}
            </h3>
            <p class="text-gray-400 group-hover:text-gray-300 transition-colors">
                {subTitle}
            </p>                     
        </div>
        <div class="opacity-0 group-hover:opacity-100 transition-all duration-300">
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-purple-400">
                <path d="M5 12h14"></path>
                <path d="m12 5 7 7-7 7"></path>
            </svg>
        </div>
    </div>
</a>
<script is:inline>     
    function navegar() {       
        var x = event?.target.closest('a');          
        const tags = JSON.parse(x?.dataset.tags);
        let tmplUrl = x.dataset.tmplurl;   
        const isDinamicUrl = x.dataset.isdinamicurl;                   
        let direccion = "";
        if (isDinamicUrl==='S'){
            direccion = tmplUrl;
        }else{
            direccion = x.href ;   
        }                            
        const radioButtons = document.querySelectorAll('[role="radio"]');
        let selectedEnv;
        for (const radioButton of radioButtons) {
            if (radioButton.checked) {
                selectedEnv = getTagEnviroment(tags,radioButton.value);
                direccion = direccion.replace('{env}',selectedEnv);                           
                x.href = direccion;
                break;
            }
        }                       
    }

    function getTagEnviroment(tags,selectedEnv) {
        const json = JSON.stringify(tags);        
        let env = tags.filter((tag) => tag.enviroment.includes(selectedEnv));      
        if (env == undefined) {
            return selectedEnv;
        }      
        if (Array.isArray(env) && env.length === 0){
            return selectedEnv;    
        }
        return env[0].tag;
        
    }    

</script>